const qrcode = require('qrcode-terminal');
const { Client, Buttons, List, MessageMedia } = require('whatsapp-web.js');
const https = require('https');
const fs = require('fs');
const path = require('path');

const client = new Client();

client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
});

client.initialize();

const delay = ms => new Promise(res => setTimeout(res, ms));

const estados = {};
const temposLimite = {};

client.on('message', async msg => {
    const userNumber = msg.from;

    // Normaliza a mensagem: remove espaços, acentos e converte para minúsculas
    if (msg.body) {
        msg.body = msg.body.trim().normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase();
    }

    // Comando para sair
    const exitCommands = ['sair', 's'];
    if (msg.body && exitCommands.includes(msg.body)) {
        delete estados[userNumber];
        delete temposLimite[userNumber];
        await client.sendMessage(userNumber, 'Você saiu da conversa. Se precisar de ajuda, digite "oi" para iniciar uma nova conversa.');
        return;
    }

    // Comando para iniciar a conversa
    const startCommands = ['oi', 'ola'];
    if (msg.body && startCommands.includes(msg.body)) {
        estados[userNumber] = 'main_menu';
        clearTimeout(temposLimite[userNumber]);

        temposLimite[userNumber] = setTimeout(() => {
            client.sendMessage(
                userNumber,
                'Fim de conversa por inatividade. Se precisar de ajuda, digite "oi" para iniciar uma nova conversa.'
            );
            delete estados[userNumber];
            delete temposLimite[userNumber];
        }, 180000);

        try {
            const media = MessageMedia.fromFilePath(path.join(__dirname, 'imagens', 'LACERDA.png'));
            await client.sendMessage(userNumber, media);
        } catch (error) {
            console.error("Erro ao enviar imagem:", error);
            await client.sendMessage(userNumber, "Ocorreu um erro ao enviar a imagem da Assistente Virtual.");
        }

        const contact = await msg.getContact();
        const name = contact.pushname || 'Usuário'; // Fallback caso pushname seja undefined

        await client.sendMessage(userNumber, 'Olá, ' + name.split(". ")[0] + ' Eu sou a Lacerda, assistente virtual do Condomínio T Lacerda.\n\nDigite uma das opções:\n\n1 - Boletos\n2 - Prestação de contas\n\n3 - Para sair da conversa digite sair ou s.');

    } else if (estados[userNumber]) {
        // Redefine o tempo limite para estados ativos
        clearTimeout(temposLimite[userNumber]);
        temposLimite[userNumber] = setTimeout(() => {
            client.sendMessage(
                userNumber,
                'Fim de conversa por inatividade. Se precisar de ajuda, digite "oi" para iniciar uma nova conversa.'
            );
            delete estados[userNumber];
            delete temposLimite[userNumber];
        }, 180000);
    }

    // Opção 1: Boletos
    if (msg.body === '1' && userNumber.endsWith('@c.us')) {
        const chat = await msg.getChat();

        if (estados[userNumber] === 'main_menu') {
            await delay(1000);
            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(userNumber, 'Clique nos links abaixo para baixar:\n\nBoletos com vencimento em 10/3/2025:');

            await delay(1000);
            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(userNumber, '\n\nTaxa condominial: https://site.com\n\nTaxa acordo M2D: https://site.com\n\nFundo de reserva para urgência hidráulica/Elétrica: https://site.com');

            estados[userNumber] = 'boletos_menu';

            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(userNumber, 'Para retornar ao menu inicial digite 0');

        } else if (!estados[userNumber]) {
            await client.sendMessage(userNumber, 'Se quiser iniciar nossa conversa digite oi ou ola.');
        }
    }

    // Opção 2: Prestação de contas
    if (msg.body === '2' && userNumber.endsWith('@c.us')) {
        const chat = await msg.getChat();

        if (estados[userNumber] === 'main_menu') {
            await delay(1000);
            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(userNumber, 'Prestação de contas referente a fevereiro de 2025:');

            await delay(1000);
            await chat.sendStateTyping();
            await delay(2000);

            try {
                const localPath = path.join(__dirname, 'pdfs', 'contas', '2025', '2.fev', 'prestacao_contas.pdf');

                console.log('Usando o arquivo PDF existente no diretório pdfs/contas/2025/2.fev.');

                try {
                    const media = MessageMedia.fromFilePath(localPath);
                    await client.sendMessage(userNumber, media, { sendMediaAsDocument: true, filename: 'prestacao_contas.pdf' });
                    console.log('Arquivo PDF enviado com sucesso.');
                } catch (error) {
                    console.error('Erro ao enviar PDF:', error);
                    await client.sendMessage(userNumber, "Ocorreu um erro ao enviar o arquivo PDF.");
                }

            } catch (error) {
                console.error("Erro ao manipular o arquivo PDF:", error);
                await client.sendMessage(userNumber, "Ocorreu um erro ao manipular o arquivo PDF.");
            }

            estados[userNumber] = 'contas_menu';

            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(userNumber, 'Para retornar ao menu inicial digite 0');

        } else if (!estados[userNumber]) {
            await client.sendMessage(userNumber, 'Se quiser iniciar nossa conversa digite oi ou ola.');
        }
    }

    // Opção 0: Retornar ao menu principal
    if (msg.body === '0' && userNumber.endsWith('@c.us')) {
        const chat = await msg.getChat();

        if (estados[userNumber] === 'boletos_menu' || estados[userNumber] === 'contas_menu') {
            await delay(1000);
            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(userNumber, 'Menu principal.\n\nDigite uma das opções:\n\n1 - Boletos\n2 - Prestação de contas\n\n3 - Para sair da conversa digite sair ou s.');

            estados[userNumber] = 'main_menu';

        } else if (!estados[userNumber]) {
            await client.sendMessage(userNumber, 'Se quiser iniciar uma nova conversa digite oi ou ola.');
        }
    }
});