const qrcode = require('qrcode-terminal');
const { Client, Buttons, List, MessageMedia } = require('whatsapp-web.js');
const client = new Client();

client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
});

client.initialize();

const delay = ms => new Promise(res => setTimeout(res, ms));

const estados = {}; // Objeto para armazenar o estado de cada usuário
const temposLimite = {}; // Objeto para armazenar os tempos limite de cada usuário

client.on('message', async msg => {
    const numeroTelefone = msg.from;

    // Verifica se a mensagem é um comando para sair
    if (msg.body === 'sair' || msg.body === 'Sair' || msg.body === 'S' || msg.body === 's') {
        delete estados[numeroTelefone];
        delete temposLimite[numeroTelefone];
        await client.sendMessage(msg.from, 'Você saiu da conversa. Se precisar de ajuda, digite "oi" para iniciar uma nova conversa.');
        return; // Encerra a execução para evitar conflitos
    }

    // Verifica se o usuário iniciou uma nova conversa ou interagiu
    if (msg.body.match(/(oi|Oi|Olá|olá|ola|Ola)/i)) {
        // Reseta o estado e o tempo limite
        estados[numeroTelefone] = 'on';
        clearTimeout(temposLimite[numeroTelefone]); // Limpa o tempo limite anterior

        // Define um novo tempo limite de 3 minutos (180000 milissegundos)
        temposLimite[numeroTelefone] = setTimeout(() => {
            // Envia mensagem de fim de conversa por inatividade
            client.sendMessage(
                numeroTelefone,
                'Fim de conversa por inatividade. Se precisar de ajuda, digite "oi" para iniciar uma nova conversa.'
            );
            delete estados[numeroTelefone]; // Reseta o estado
            delete temposLimite[numeroTelefone];
        }, 180000);

        // Envia a mensagem de boas-vindas com a imagem
        try {
            const media = MessageMedia.fromFilePath('E:/PROGRAMAS/Microsoft Office 2010/T LACERDA TEMPORÁRIO/CHATBOT/IMAGENS/LACERDA.png');
            await client.sendMessage(msg.from, media);
        } catch (error) {
            console.error("Erro ao enviar imagem:", error);
            await client.sendMessage(msg.from, "Ocorreu um erro ao enviar a imagem.");
        }

        const contact = await msg.getContact();
        const name = contact.pushname;

        await client.sendMessage(msg.from, 'Olá, ' + name.split(". ")[0] + ' Eu sou a Lacerda, assistente virtual do Condomínio T Lacerda.\n\nDigite uma das opções:\n\n1 - Boletos\n2 - Prestação de contas\n\nPara sair da conversa digite sair ou s.');

    } else {
        // Se o usuário interagiu, mas não iniciou uma nova conversa,
        // apenas reseta o tempo limite
        if (estados[numeroTelefone]) {
            clearTimeout(temposLimite[numeroTelefone]);
            temposLimite[numeroTelefone] = setTimeout(() => {
                client.sendMessage(
                    numeroTelefone,
                    'Fim de conversa por inatividade. Se precisar de ajuda, digite "oi" para iniciar uma nova conversa.'
                );
                delete estados[numeroTelefone];
                delete temposLimite[numeroTelefone];
            }, 180000);
        }
    }

    // Resto do código...
    if (msg.body !== null && msg.body === '1' && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();

        if (estados[numeroTelefone] === 'on' || estados[numeroTelefone] === 'on0') {
            await delay(1000);
            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(msg.from, 'Clique nos links abaixo para baixar:\n\nBoletos com vencimento em 10/3/2025:');

            await delay(1000);
            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(msg.from, '\n\nTaxa condominial: https://site.com\n\nTaxa acordo M2D: https://site.com\n\nFundo de reserva para urgência hidráulica/Elétrica: https://site.com');

            estados[numeroTelefone] = 'menuPrincipalUm';

            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(msg.from, 'Para retornar ao menu inicial digite 0');

        } else if (estados[numeroTelefone] === 'off') {
            await client.sendMessage(msg.from, 'Se quiser iniciar nossa conversa digite oi ou ola.');
        }
    }

    if (msg.body !== null && msg.body === '2' && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();

        if (estados[numeroTelefone] === 'on' || estados[numeroTelefone] === 'on0') {
            await delay(1000);
            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(msg.from, 'Clique no link abaixo para baixar:\n\nPrestação de contas referente a fevereiro de 2025:');

            await delay(1000);
            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(msg.from, 'Arquivo pdf: https://site.com');

            estados[numeroTelefone] = 'menuPrincipalDois';

            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(msg.from, 'Para retornar ao menu inicial digite 0');

        } else if (estados[numeroTelefone] === 'off') {
            await client.sendMessage(msg.from, 'Se quiser iniciar nossa conversa digite oi ou ola.');
        }
    }

    if (msg.body !== null && msg.body === '0' && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();

        if (estados[numeroTelefone] === 'menuPrincipalUm' || estados[numeroTelefone] === 'menuPrincipalDois') {
            await delay(1000);
            await chat.sendStateTyping();
            await delay(2000);
            await client.sendMessage(msg.from, 'Menu principal.\n\nDigite uma das opções:\n\n1 - Boletos\n2 - Prestação de contas\n\nPara sair da conversa digite sair ou s.');

            estados[numeroTelefone] = 'on0';

        } else if (estados[numeroTelefone] === 'off') {
            await client.sendMessage(msg.from, 'Se quiser iniciar nossa conversa digite oi ou ola.');
        }
    }

});